/* Locations in Storage */
#define macro DELEGATE_LOCATION = takes(0) returns(1) {
    0x00
}

#define macro OWNER_LOCATION = takes (0) returns (1) {
    0x01
}

/* Constants */
#define macro ADDRESS_MASK = takes(1) returns (1) {
    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff
    and
}

/* Constructor */
#define macro CONSTRUCTOR = takes (0) returns (1) {
    caller OWNER_LOCATION() sstore // Store the owner address (owner = msg.sender)

    0x1F codesize sub 0x00 mstore // Calculate the delegate location in bytecode (uint256 offset = address(this) - 31)
    0x20 0x00 mload 0x01 codecopy // Copy the address to memory
    0x00 mload DELEGATE_LOCATION() sstore // Store the address of the delegate
}

/* Utils */
#define macro UTILS__COPY_CALLDATA = takes (1) returns (2) {
    // Location
    calldatasize dup1 dup3 dup4 calldatacopy 
}

#define macro UTILS__DELEGATECALL = takes (2) returns (2) {
    // Location
    dup2 dup3 swap2 dup4 DELEGATE_LOCATION() sload gas delegatecall
}

/* Methods */
#define macro DELEGATE = takes (0) returns (1) {
    DELEGATE_LOCATION() sload 0x00 mstore
    0x20 0x00 return
}

#define macro OWNER = takes (0) returns (1) {
    OWNER_LOCATION() sload 0x00 mstore
    0x20 0x00 return
}

/* Main */
template<delegate, owner>
#define macro PROXY_FUNCTION_SIGNATURES = takes (0) returns (0) {
    0x00 calldataload 224 shr // function signature
    dup1 0xc89e4361 eq <delegate> jumpi
    dup1 0x8da5cb5b eq <owner> jumpi

    0x00 UTILS__COPY_CALLDATA() UTILS__DELEGATECALL() return 
}

#define macro MAIN = takes (0) returns (0) {
    PROXY_FUNCTION_SIGNATURES<delegate, owner>()
    delegate:
        DELEGATE()
    owner: 
        OWNER()
}
