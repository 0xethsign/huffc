
/* Imports */
#include "./contracts/utils/Ownable.huff"
#include "./contracts/utils/Address.huff"
#include "./contracts/utils/Utils.huff"
#include "./contracts/utils/HashMap.huff"

/* Interface */
#define function mint(address,uint256) nonpayable returns ()
#define function transfer(address,uint256) nonpayable returns ()
#define function transferFrom(address,address,uint256) nonpayable returns ()
#define function approve(address,uint256) nonpayable returns ()

#define function balanceOf(address) view returns (uint256)
#define function allowance(address,address) view returns (uint256)
#define function totalSupply() view returns (uint256)

#define event Transfer(address,address,uint256)
#define event Approve(address,address,uint256)

/* Events Signatures */
#define constant TRANSFER_EVENT_SIGNATURE = 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF
#define constant APPROVAL_EVENT_SIGNATURE = 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925

/* Storage Slots */
#define constant BALANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant ALLOWANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant TOTAL_SUPPLY_LOCATION = FREE_STORAGE_POINTER()

/* Constructor */

#define macro CONSTRUCTOR() = takes(0) returns (0) {
    // Set msg.sender as the owner of the contract.
    OWNABLE_CONSTRUCTOR()
}


/* Transfer Functions */
#define macro TRANSFER_TAKE_FROM(error) = takes(3) returns (3) {
    // Ensure that the sender has a sufficient balance.
    // input stack: [value, from, to]
    dup2                // [from, value, from, to]
    LOAD_ELEMENT(0x00)  // [balance, value, from, to]
    dup1                // [balance, balance, value, from, to]
    dup3                // [value, balance, balance, value, from, to]
    gt                  // [value>balance, balance, value, from, to]              
    <error> jumpi       // [balance, value, from, to]

    // Update the sender's balance.
    // input stack: [balance, value, from, to]
    dup2                // [value, balance, value, from, to]
    swap1               // [balance, value, value, from, to]
    sub                 // [balance - value, value, from, to]
    dup3                // [from, balance-value, value, from, to]
    STORE_ELEMENT(0x00) // [value, from, to]
}

#define macro TRANSFER_GIVE_TO() = takes(3) returns (0) {
    // Update the balance of the recipient.
    // input stack: [value, from, to]
    dup3                // [to, value, from, to]
    dup2                // [value, to, value, from, to]
    swap1               // [to, value, value, from, to]
    LOAD_ELEMENT(0x00)  // [balance, value, value, from, to]
    add                 // [balance+value, value, from, to]
    dup3                // [to, balance+value, value, from, to]
    STORE_ELEMENT(0x00) // [value, from, to]
}

#define macro TRANSFER() = takes(0) returns(1) {
    // Setup the stack for the transfer function.
    0x04 calldataload   // [to]
    caller              // [from, to]
    0x24 calldataload   // [value, from, to]

    // Update the balances of the sender and recipient.
    TRANSFER_TAKE_FROM(error)   // [value, from, to]
    TRANSFER_GIVE_TO()          // [value, from, to]

    // Emit the transfer event.
    0x00 mstore                 // [from, to]
    [TRANSFER_EVENT_SIGNATURE]  // [sig, from, to]
    0x20 0x00                   // [0, 32, sig, from, to]
    log3                        // []

    // Return "1" to represent a succesful transfer.
    0x01 0x00 mstore
    0x20 0x00 return 

    // Error destination.
    error:
        0x00 0x00 revert
}

/* Mint Functions */
#define macro MINT() = takes(0) returns (0) {
    // Ensure that the sender is the owner of the contract.
    ONLY_OWNER()

    // Setup the stack for the mint function.
    0x04 calldataload   // [to]
    0x00                // [from (0x00), to]
    0x24 calldataload   // [value, from, to]

    // Give tokens to the recipient.
    TRANSFER_GIVE_TO()  // [value, from, to]

    // Emit the transfer event.
    0x00 mstore                 // [from, to]
    [TRANSFER_EVENT_SIGNATURE]  // [sig, from, to]
    0x20 0x00                   // [0, 32, sig, from, to]
    log3                        // []
}

// Main Macro
#define macro MAIN() = takes(0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 0xa9059cbb eq transfer jumpi
    dup1 0x40c10f19 eq mint jumpi

    transfer:
        TRANSFER()
    mint:
        MINT()
}